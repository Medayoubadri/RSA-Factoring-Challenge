#!/usr/bin/env python3

import sys
import random
from math import gcd, isqrt


def trial_division(n):
    """
    Perform trial division to quickly find small factors of the number.

    Args:
        n (int): The number to factorize.

    Returns:
        tuple: A tuple containing two factors of the number if found.
        None: If no small factors are found.
    """
    for i in range(2, min(isqrt(n) + 1, 1000)):
        if n % i == 0:
            return i, n // i
    return None


def pollards_rho(n):
    """
    Use Pollard's Rho algorithm to find a non-trivial factor of the number.

    Args:
        n (int): The number to factorize.

    Returns:
        int: A non-trivial factor of the number if found.
        None: If no factor is found.
    """
    if n % 2 == 0:
        return 2

    # Random initial values and constant
    y, c, m = random.randint(1, n - 1),random.randint(1, n - 1), random.randint(1, n - 1)
    r, q, g = 1, 1, 1

    def f(x):
        return (x**2 + c) % n

    while g == 1:
        x = y
        # Cycle of length r
        for _ in range(r):
            y = f(y)

        # Use accumulated product for GCD calculation
        k = 0
        while k < r and g == 1:
            ys = y
            for _ in range(min(m, r - k)):
                y = f(y)
                q = (q * abs(x - y)) % n
            g = gcd(q, n)
            k += m
        r *= 2

    if g == n:
        # Retry with different parameters if factorization fails
        while True:
            ys = f(ys)
            g = gcd(abs(x - ys), n)
            if g > 1:
                break

    return g


def factorize(n):
    """
    Factorize a number into two smaller numbers.

    Args:
        n (int): The number to factorize.

    Returns:
        tuple: A tuple containing two factors of the number.
    """
    if n <= 3:
        return n, 1

    # Try trial division first
    factor_pair = trial_division(n)
    if factor_pair:
        return factor_pair

    # If trial division fails, use Pollard's Rho
    factor = pollards_rho(n)
    if factor:
        return factor, n // factor
    return n, 1


def main(filename):
    """
    Main function to read the input file and factorize each number.

    Args:
        filename (str): The path to the file containing numbers to factorize.

    Prints:
        str: Each number in the form "n=p*q", where p and q are factors of n.
    """
    try:
        with open(filename, 'r') as file:
            numbers = [int(line.strip()) for line in file]

        for n in numbers:
            p, q = factorize(n)
            print(f"{n}={p}*{q}")

    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
    except ValueError:
        print(f"Error: Invalid number in the file.")
    except Exception as e:
        print(f"An error occurred: {e}")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: factors <file>")
        sys.exit(1)
    main(sys.argv[1])
